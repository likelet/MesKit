## prepare Schism input
dir.cluster.tsv = "/home/ninomoriaty/R_Project/EvolCancer/EvolCancer/hu.cluster.tsv"
dir.loci.tsv = "/home/ninomoriaty/R_Project/EvolCancer/EvolCancer/hu.loci.tsv"
dir.output = "/home/ninomoriaty/R_Project/EvolCancer/EvolCancer/Schism"
# read mutations in cluster.tsv from PyClone and get targeted clusters
cluster.tsv = read.table(dir.cluster.tsv, sep="\t", stringsAsFactors=F, header=T)
cluster_filter = cluster.tsv[!is.na(cluster.tsv$cluster_id) & cluster.tsv$size >= 5 & cluster.tsv$mean >= 0.1,]
cluster_ls  = unique(cluster_filter$cluster_id)
# read mutations within targeted clusters in loc.tsv file from PyClone
loci.tsv = read.table(dir.loci.tsv, sep="\t", stringsAsFactors=F, header=T)
loci_filtered <- loci.tsv[which(loci.tsv$cluster_id %in% cluster_ls & loci.tsv$sample_id %in% sep3),]
loci_filtered <- loci.tsv[which(loci.tsv$cluster_id %in% cluster_ls & loci.tsv$sample_id %in% sep4),]
sep4 <- c("WGC033389D", "WGC033391D", "WGC033392D", "WGC033393D")
loci_filtered <- loci.tsv[which(loci.tsv$cluster_id %in% cluster_ls & loci.tsv$sample_id %in% sep4),]
mutation_ls <- loci_filtered[ ,1]
mut.common <- c()
for (mutation in mutation_ls){
if (length(unique(loci_filtered[which(loci_filtered$mutation_id == mutation),3])) == 4){
mut.common <- c(mut.common, mutation)
}
}
length(unique(mut.common))
mutation_ls <- loci_filtered[ ,1]
mut.common <- c()
for (mutation in mutation_ls){
if (length(unique(loci_filtered[which(loci_filtered$mutation_id == mutation),2])) == 4){
mut.common <- c(mut.common, mutation)
}
}
length(unique(mut.common))
dir.cluster.tsv = "/home/ninomoriaty/R_Project/EvolCancer/EvolCancer/hu.cluster.tsv"
dir.loci.tsv = "/home/ninomoriaty/R_Project/EvolCancer/EvolCancer/hu.loci.tsv"
dir.output = "/home/ninomoriaty/R_Project/EvolCancer/EvolCancer/Schism"
# read mutations in cluster.tsv from PyClone and get targeted clusters
cluster.tsv = read.table(dir.cluster.tsv, sep="\t", stringsAsFactors=F, header=T)
cluster_filter = cluster.tsv[!is.na(cluster.tsv$cluster_id) & cluster.tsv$size >= 5 & cluster.tsv$mean >= 0.1,]
cluster_ls  = unique(cluster_filter$cluster_id)
# read mutations within targeted clusters in loc.tsv file from PyClone
loci.tsv = read.table(dir.loci.tsv, sep="\t", stringsAsFactors=F, header=T)
loci_filtered <- loci.tsv[which(loci.tsv$cluster_id %in% cluster_ls & loci.tsv$sample_id %in% sep4),]
# test: separate the first 3 sample and the next 4 sample to genrate a more proper result
sep3 <- c("WGC033386D", "WGC033387D", "WGC033388D")
loci_filtered <- loci.tsv[which(loci.tsv$cluster_id %in% cluster_ls & loci.tsv$sample_id %in% sep3),]
mutation_ls <- loci_filtered[ ,1]
mut.common <- c()
for (mutation in mutation_ls){
if (length(unique(loci_filtered[which(loci_filtered$mutation_id == mutation),2])) == 3){
mut.common <- c(mut.common, mutation)
}
}
length(unique(mut.common))
View(loci_filtered)
length(mut.common)
# read mutations in cluster.tsv from PyClone and get targeted clusters
cluster.tsv = read.table(dir.cluster.tsv, sep="\t", stringsAsFactors=F, header=T)
cluster_filter = cluster.tsv[!is.na(cluster.tsv$cluster_id) & cluster.tsv$size >= 5 & cluster.tsv$mean >= 0.1,]
cluster_ls  = unique(cluster_filter$cluster_id)
# read mutations within targeted clusters in loc.tsv file from PyClone
loci.tsv = read.table(dir.loci.tsv, sep="\t", stringsAsFactors=F, header=T)
loci_filtered <- loci.tsv[which(loci.tsv$cluster_id %in% cluster_ls & loci.tsv$sample_id %in% sep3),]
View(loci_filtered)
sep4 <- c("WGC033389D", "WGC033391D", "WGC033392D", "WGC033393D")
loci.tsv = read.table(dir.loci.tsv, sep="\t", stringsAsFactors=F, header=T)
loci_filtered <- loci.tsv[which(loci.tsv$cluster_id %in% cluster_ls & loci.tsv$sample_id %in% sep4),]
mutation_ls <- loci_filtered[ ,1]
mut.common <- c()
for (mutation in mutation_ls){
if (length(unique(loci_filtered[which(loci_filtered$mutation_id == mutation),2])) == 4 & length(unique(loci_filtered[which(loci_filtered$mutation_id == mutation),3])) == 4){
mut.common <- c(mut.common, mutation)
}
}
length(unique(mut.common))
mutation_ls <- loci_filtered[ ,1]
mut.common <- c()
for (mutation in mutation_ls){
if (length(unique(loci_filtered[which(loci_filtered$mutation_id == mutation),2])) == 4){
mut.common <- c(mut.common, mutation)
}
}
length(unique(mut.common))
# dependencies of fishplot
library(png)
library(Hmisc)
library(plotrix)
library(fishplot)
dir.GA.consensusTree = "/home/ninomoriaty/R_Project/EvolCancer/E1/0_E1_results.GA.consensusTree"
dir.cluster.cellularity = "/home/ninomoriaty/R_Project/EvolCancer/E1/0_E1_result.cluster.cellularity"
# get cellularity infomation
cluster.cellularity = read.table(dir.cluster.cellularity, sep="\t", stringsAsFactors=F, header=T)
ls.sample = unique(cluster.cellularity$sampleID)
ls.cluster = unique(cluster.cellularity$clusterID)
frac.c = c()
for (sample_name in ls.sample) {
sample <- cluster.cellularity[which(cluster.cellularity$sampleID == sample_name), ]$cellularity
frac.c <- c(frac.c,sample)
}
frac.table = matrix(frac.c*100, ncol = length(ls.sample))
rownames(frac.table) <- ls.cluster
colnames(frac.table) <- ls.sample
## generate tree information
GA.consensusTree = read.table(dir.GA.consensusTree, sep="\t", stringsAsFactors=F, header=T)
ls.ends = GA.consensusTree[which(!GA.consensusTree$parent %in% GA.consensusTree$child), 1]
# make sure the first node of the tree would be first in parents
if (!rownames(frac.table)[1] %in% ls.ends){
frac.end = frac.table[which(rownames(frac.table) == ls.ends[1]),]
frac.table <- frac.table[-which(rownames(frac.table) == ls.ends[1]),]
frac.table <- rbind2(frac.end, frac.table)
rownames(frac.table)[1] <- ls.ends[1]
}
# figure out the subclonal evolution relationship
parents <- c(1:length(ls.cluster))
for (cluster_name in ls.cluster){
if (cluster_name %in% ls.ends){
parents[which(rownames(frac.table) == cluster_name)] <- 0
} else{
parents[which(rownames(frac.table) == cluster_name)] <- which(rownames(frac.table) == GA.consensusTree[which(GA.consensusTree$child == cluster_name), 1])
}
}
## generate tree information
GA.consensusTree = read.table(dir.GA.consensusTree, sep="\t", stringsAsFactors=F, header=T)
###### generate results for createFishPlotObjects ######
## Method2: get the result from GA.consensusTree, but it take so much time for runSchism to calculate the result.
dir.GA.consensusTree = "/home/ninomoriaty/R_Project/EvolCancer/E1/0_E1_result.GA.consensusTree"
## generate tree information
GA.consensusTree = read.table(dir.GA.consensusTree, sep="\t", stringsAsFactors=F, header=T)
ls.ends = GA.consensusTree[which(!GA.consensusTree$parent %in% GA.consensusTree$child), 1]
# make sure the first node of the tree would be first in parents
if (!rownames(frac.table)[1] %in% ls.ends){
frac.end = frac.table[which(rownames(frac.table) == ls.ends[1]),]
frac.table <- frac.table[-which(rownames(frac.table) == ls.ends[1]),]
frac.table <- rbind2(frac.end, frac.table)
rownames(frac.table)[1] <- ls.ends[1]
}
# figure out the subclonal evolution relationship
parents <- c(1:length(ls.cluster))
for (cluster_name in ls.cluster){
if (cluster_name %in% ls.ends){
parents[which(rownames(frac.table) == cluster_name)] <- 0
} else{
parents[which(rownames(frac.table) == cluster_name)] <- which(rownames(frac.table) == GA.consensusTree[which(GA.consensusTree$child == cluster_name), 1])
}
}
View(frac.table)
# tips: make sure that the parents start from 0 or you will get c stack error
fish = createFishObject(frac.table, parents, timepoints = c(1:length(ls.sample)))
fish = layoutClones(fish)
fishPlot(fish, shape="spline", title.btm="PatientID", cex.title=0.5,
vlines=seq(1, length(ls.sample)), vlab=ls.sample, pad.left=0.5)
dir.GA.consensusTree = "/home/ninomoriaty/R_Project/EvolCancer/E2/sample-output/E2.GA.consensusTree"
dir.cluster.cellularity = "/home/ninomoriaty/R_Project/EvolCancer/E2/sample-output/E2.cluster.cellularity"
# get cellularity infomation
cluster.cellularity = read.table(dir.cluster.cellularity, sep="\t", stringsAsFactors=F, header=T)
ls.sample = unique(cluster.cellularity$sampleID)
ls.cluster = unique(cluster.cellularity$clusterID)
frac.c = c()
for (sample_name in ls.sample) {
sample <- cluster.cellularity[which(cluster.cellularity$sampleID == sample_name), ]$cellularity
frac.c <- c(frac.c,sample)
}
frac.table = matrix(frac.c*100, ncol = length(ls.sample))
rownames(frac.table) <- ls.cluster
colnames(frac.table) <- ls.sample
dir.GA.consensusTree = "/home/ninomoriaty/R_Project/EvolCancer/E2/sample-output/E2.GA.consensusTree"
dir.cluster.cellularity = "/home/ninomoriaty/R_Project/EvolCancer/E2/sample-output/E2.cluster.cellularity"
ls.sample = unique(cluster.cellularity$sampleID)
ls.cluster = unique(cluster.cellularity$clusterID)
# get cellularity infomation
cluster.cellularity = read.table(dir.cluster.cellularity, sep="\t", stringsAsFactors=F, header=T)
ls.sample = unique(cluster.cellularity$sampleID)
ls.cluster = unique(cluster.cellularity$clusterID)
frac.c = c()
for (sample_name in ls.sample) {
sample <- cluster.cellularity[which(cluster.cellularity$sampleID == sample_name), ]$cellularity
frac.c <- c(frac.c,sample)
}
frac.table = matrix(frac.c*100, ncol = length(ls.sample))
rownames(frac.table) <- ls.cluster
colnames(frac.table) <- ls.sample
## generate tree information
GA.consensusTree = read.table(dir.GA.consensusTree, sep="\t", stringsAsFactors=F, header=T)
ls.ends = GA.consensusTree[which(!GA.consensusTree$parent %in% GA.consensusTree$child), 1]
# make sure the first node of the tree would be first in parents
if (!rownames(frac.table)[1] %in% ls.ends){
frac.end = frac.table[which(rownames(frac.table) == ls.ends[1]),]
frac.table <- frac.table[-which(rownames(frac.table) == ls.ends[1]),]
frac.table <- rbind2(frac.end, frac.table)
rownames(frac.table)[1] <- ls.ends[1]
}
# figure out the subclonal evolution relationship
parents <- c(1:length(ls.cluster))
for (cluster_name in ls.cluster){
if (cluster_name %in% ls.ends){
parents[which(rownames(frac.table) == cluster_name)] <- 0
} else{
parents[which(rownames(frac.table) == cluster_name)] <- which(rownames(frac.table) == GA.consensusTree[which(GA.consensusTree$child == cluster_name), 1])
}
}
# figure out the subclonal evolution relationship
parents <- c(1:length(ls.cluster))
for (cluster_name in ls.cluster){
if (cluster_name %in% ls.ends){
parents[which(rownames(frac.table) == cluster_name)] <- 0
} else{
parents[which(rownames(frac.table) == cluster_name)] <- which(rownames(frac.table) == GA.consensusTree[which(GA.consensusTree$child == cluster_name), 1])
}
}
parents
View(frac.table)
a
# figure out the subclonal evolution relationship
parents <- c(1:length(ls.cluster))
ls.ends = unique(GA.consensusTree[which(!GA.consensusTree$parent %in% GA.consensusTree$child), 1])
# make sure the first node of the tree would be first in parents
if (!rownames(frac.table)[1] %in% ls.ends){
frac.end = frac.table[which(rownames(frac.table) == ls.ends[1]),]
frac.table <- frac.table[-which(rownames(frac.table) == ls.ends[1]),]
frac.table <- rbind2(frac.end, frac.table)
rownames(frac.table)[1] <- ls.ends[1]
}
# figure out the subclonal evolution relationship
parents <- c(1:length(ls.cluster))
for (cluster_name in ls.cluster){
if (cluster_name %in% ls.ends){
parents[which(rownames(frac.table) == cluster_name)] <- 0
} else{
parents[which(rownames(frac.table) == cluster_name)] <- which(rownames(frac.table) == GA.consensusTree[which(GA.consensusTree$child == cluster_name), 1])
}
}
cluster_name == 0
cluster_name = 0
cluster_name = 0
parents[which(rownames(frac.table) == cluster_name)] <- 0
# get cellularity infomation
cluster.cellularity = read.table(dir.cluster.cellularity, sep="\t", stringsAsFactors=F, header=T)
ls.sample = unique(cluster.cellularity$sampleID)
ls.cluster = unique(cluster.cellularity$clusterID)
frac.c = c()
for (sample_name in ls.sample) {
sample <- cluster.cellularity[which(cluster.cellularity$sampleID == sample_name), ]$cellularity
frac.c <- c(frac.c,sample)
}
frac.table = matrix(frac.c*100, ncol = length(ls.sample))
rownames(frac.table) <- ls.cluster
colnames(frac.table) <- ls.sample
View(frac.table)
## generate tree information
GA.consensusTree = read.table(dir.GA.consensusTree, sep="\t", stringsAsFactors=F, header=T)
ls.ends = unique(GA.consensusTree[which(!GA.consensusTree$parent %in% GA.consensusTree$child), 1])
# make sure the first node of the tree would be first in parents
if (!rownames(frac.table)[1] %in% ls.ends){
frac.end = frac.table[which(rownames(frac.table) == ls.ends[1]),]
frac.table <- frac.table[-which(rownames(frac.table) == ls.ends[1]),]
frac.table <- rbind2(frac.end, frac.table)
rownames(frac.table)[1] <- ls.ends[1]
}
# figure out the subclonal evolution relationship
parents <- c(1:length(ls.cluster))
cluster_name = 0
if (cluster_name %in% ls.ends){
parents[which(rownames(frac.table) == cluster_name)] <- 0
} else{
parents[which(rownames(frac.table) == cluster_name)] <- which(rownames(frac.table) == GA.consensusTree[which(GA.consensusTree$child == cluster_name), 1])
}
cluster_name = 1
if (cluster_name %in% ls.ends){
parents[which(rownames(frac.table) == cluster_name)] <- 0
} else{
parents[which(rownames(frac.table) == cluster_name)] <- which(rownames(frac.table) == GA.consensusTree[which(GA.consensusTree$child == cluster_name), 1])
}
cluster_name = 10
if (cluster_name %in% ls.ends){
parents[which(rownames(frac.table) == cluster_name)] <- 0
} else{
parents[which(rownames(frac.table) == cluster_name)] <- which(rownames(frac.table) == GA.consensusTree[which(GA.consensusTree$child == cluster_name), 1])
}
rownames(frac.table)
GA.consensusTree[which(GA.consensusTree$child == cluster_name)
GA.consensusTree[which(GA.consensusTree$child == cluster_name),1]
View(GA.consensusTree)
GA.consensusTree[which(GA.consensusTree$child == cluster_name),0]
GA.consensusTree[which(GA.consensusTree$child == cluster_name),1]
cluster_name = 10
GA.consensusTree[which(GA.consensusTree$child == cluster_name),1]
rownames(frac.table)
which(ronames(frac.table) == GA.consensusTree[which(GA.consensusTree$child == cluster_name),1])
which(rownames(frac.table) == GA.consensusTree[which(GA.consensusTree$child == cluster_name),1])
which(rownames(frac.table) == GA.consensusTree[which(GA.consensusTree$child == cluster_name),1])
ownames(frac.table) == GA.consensusTree[which(GA.consensusTree$child == cluster_name),1])
rownames(frac.table) == GA.consensusTree[which(GA.consensusTree$child == cluster_name),1])
rownames(frac.table) == GA.consensusTree[which(GA.consensusTree$child == cluster_name),1]
which(rownames(frac.table) == GA.consensusTree[which(GA.consensusTree$child == cluster_name), 1])
which(rownames(frac.table) == GA.consensusTree[which(GA.consensusTree$child == cluster_name), 1])
rownames(frac.table) == GA.consensusTree[which(GA.consensusTree$child == cluster_name), 1]
GA.consensusTree[which(GA.consensusTree$child == cluster_name), 1]
typeof(GA.consensusTree[which(GA.consensusTree$child == cluster_name), 1])
as.integer(rownames(frac.table)) == GA.consensusTree[which(GA.consensusTree$child == cluster_name),1])
as.integer(rownames(frac.table)) == GA.consensusTree[which(GA.consensusTree$child == cluster_name),1]
as.integer(rownames(frac.table))
typeof(as.integer(rownames(frac.table)))
rownames(frac.table))
rownames(frac.table)
"0" == 0
GA.consensusTree[which(GA.consensusTree$child == cluster_name), 1]
typeof(GA.consensusTree[which(GA.consensusTree$child == cluster_name), 1])
c("8", "9", "10")GA.consensusTree[which(GA.consensusTree$child == cluster_name), 1]
c("8", "9", "10") == GA.consensusTree[which(GA.consensusTree$child == cluster_name), 1]
parent_cluster <- which(c(rownames(frac.table)) == GA.consensusTree[which(GA.consensusTree$child == cluster_name), 1])
View(GA.consensusTree)
frac.table[which(rownames(frac.table) == GA.consensusTree[which(GA.consensusTree$child == cluster_name), 1])]
which(rownames(frac.table) == min(parent_cluster)
which(rownames(frac.table) == min(parent_cluster))
which(rownames(frac.table) == min(parent_cluster))
min(parent_cluster)
parent_cluster <- GA.consensusTree[which(GA.consensusTree$child == cluster_name), 1]
min(parent_cluster)
which(rownames(frac.table) == min(parent_cluster)
)
parents <- c(1:length(ls.cluster))
for (cluster_name in ls.cluster){
parent_cluster <- GA.consensusTree[which(GA.consensusTree$child == cluster_name), 1]
if (cluster_name %in% ls.ends){
parents[which(rownames(frac.table) == cluster_name)] <- 0
} else{
parents[which(rownames(frac.table) == cluster_name)] <- which(rownames(frac.table) == min(parent_cluster))
}
}
# tips: make sure that the parents start from 0 or you will get c stack error
fish = createFishObject(frac.table, parents, timepoints = c(1:length(ls.sample)))
dir.GA.consensusTree = "/home/ninomoriaty/R_Project/EvolCancer/E1/sample-output/E1.GA.consensusTree"
dir.cluster.cellularity = "/home/ninomoriaty/R_Project/EvolCancer/E1/sample-output/E1.cluster.cellularity"
# get cellularity infomation
cluster.cellularity = read.table(dir.cluster.cellularity, sep="\t", stringsAsFactors=F, header=T)
ls.sample = unique(cluster.cellularity$sampleID)
ls.cluster = unique(cluster.cellularity$clusterID)
frac.c = c()
for (sample_name in ls.sample) {
sample <- cluster.cellularity[which(cluster.cellularity$sampleID == sample_name), ]$cellularity
frac.c <- c(frac.c,sample)
}
frac.table = matrix(frac.c*100, ncol = length(ls.sample))
rownames(frac.table) <- ls.cluster
colnames(frac.table) <- ls.sample
## generate tree information
GA.consensusTree = read.table(dir.GA.consensusTree, sep="\t", stringsAsFactors=F, header=T)
ls.ends = unique(GA.consensusTree[which(!GA.consensusTree$parent %in% GA.consensusTree$child), 1])
# make sure the first node of the tree would be first in parents
if (!rownames(frac.table)[1] %in% ls.ends){
frac.end = frac.table[which(rownames(frac.table) == ls.ends[1]),]
frac.table <- frac.table[-which(rownames(frac.table) == ls.ends[1]),]
frac.table <- rbind2(frac.end, frac.table)
rownames(frac.table)[1] <- ls.ends[1]
}
# figure out the subclonal evolution relationship
parents <- c(1:length(ls.cluster))
for (cluster_name in ls.cluster){
parent_cluster <- GA.consensusTree[which(GA.consensusTree$child == cluster_name), 1]
if (cluster_name %in% ls.ends){
parents[which(rownames(frac.table) == cluster_name)] <- 0
} else{
parents[which(rownames(frac.table) == cluster_name)] <- which(rownames(frac.table) == min(parent_cluster))
}
}
# tips: make sure that the parents start from 0 or you will get c stack error
fish = createFishObject(frac.table, parents, timepoints = c(1:length(ls.sample)))
fish = layoutClones(fish)
fishPlot(fish, shape="spline", title.btm="PatientID", cex.title=0.5,
vlines=seq(1, length(ls.sample)), vlab=ls.sample, pad.left=0.5)
View(frac.table)
dir.GA.consensusTree = "/home/ninomoriaty/R_Project/EvolCancer/E2/sample-output/E2.GA.consensusTree"
dir.cluster.cellularity = "/home/ninomoriaty/R_Project/EvolCancer/E2/sample-output/E2.cluster.cellularity"
# get cellularity infomation
cluster.cellularity = read.table(dir.cluster.cellularity, sep="\t", stringsAsFactors=F, header=T)
ls.sample = unique(cluster.cellularity$sampleID)
ls.cluster = unique(cluster.cellularity$clusterID)
frac.c = c()
for (sample_name in ls.sample) {
sample <- cluster.cellularity[which(cluster.cellularity$sampleID == sample_name), ]$cellularity
frac.c <- c(frac.c,sample)
}
frac.table = matrix(frac.c*100, ncol = length(ls.sample))
rownames(frac.table) <- ls.cluster
colnames(frac.table) <- ls.sample
View(frac.table)
## generate tree information
GA.consensusTree = read.table(dir.GA.consensusTree, sep="\t", stringsAsFactors=F, header=T)
ls.ends = unique(GA.consensusTree[which(!GA.consensusTree$parent %in% GA.consensusTree$child), 1])
# make sure the first node of the tree would be first in parents
if (!rownames(frac.table)[1] %in% ls.ends){
frac.end = frac.table[which(rownames(frac.table) == ls.ends[1]),]
frac.table <- frac.table[-which(rownames(frac.table) == ls.ends[1]),]
frac.table <- rbind2(frac.end, frac.table)
rownames(frac.table)[1] <- ls.ends[1]
}
# figure out the subclonal evolution relationship
parents <- c(1:length(ls.cluster))
for (cluster_name in ls.cluster){
parent_cluster <- GA.consensusTree[which(GA.consensusTree$child == cluster_name), 1]
if (cluster_name %in% ls.ends){
parents[which(rownames(frac.table) == cluster_name)] <- 0
} else{
parents[which(rownames(frac.table) == cluster_name)] <- which(rownames(frac.table) == min(parent_cluster))
}
}
# tips: make sure that the parents start from 0 or you will get c stack error
fish = createFishObject(frac.table, parents, timepoints = c(1:length(ls.sample)), fix.missing.clones=TRUE)
parents[3]
parents[4]
parents[5]
parents[6]
parents[7]
parents[8]
parents[9]
parents[10]
parents[11]
parents[12]
parents[13]
parents[14]
parents[15]
# tips: make sure that the parents start from 0 or you will get c stack error
fish = createFishObject(frac.table, parents, timepoints = c(1:length(ls.sample)), fix.missing.clones=TRUE)
# tips: E2 test
frac.table <- frac.table-1
View(frac.table)
# tips: E2 test
frac.table <- frac.table+1
# tips: E2 test
frac.table[frac.table == 0]
# tips: E2 test
frac.table[which(frac.table == 0)]
# tips: E2 test
frac.table[which(frac.table != 0)] <-
# tips: make sure that the parents start from 0 or you will get c stack error
fish = createFishObject(frac.table, parents, timepoints = c(1:length(ls.sample)), fix.missing.clones=TRUE)
# tips: E2 test
frac.table[which(frac.table != 0)]
# tips: E2 test
frac.table[which(frac.table != 0)] <- frac.table[which(frac.table != 0)]-1
View(frac.table)
# tips: make sure that the parents start from 0 or you will get c stack error
fish = createFishObject(frac.table, parents, timepoints = c(1:length(ls.sample)), fix.missing.clones=TRUE)
frac.table[1, ]
frac.table[1, ] <- 100
View(frac.table)
# tips: make sure that the parents start from 0 or you will get c stack error
fish = createFishObject(frac.table, parents, timepoints = c(1:length(ls.sample)), fix.missing.clones=TRUE)
fish = layoutClones(fish)
fishPlot(fish, shape="spline", title.btm="PatientID", cex.title=0.5,
vlines=seq(1, length(ls.sample)), vlab=ls.sample, pad.left=0.5)
View(frac.table)
fish = setCol(fish, ls.sample)
# tips: make sure that the parents start from 0 or you will get c stack error
fish = createFishObject(frac.table, parents, timepoints = c(1:length(ls.sample)), fix.missing.clones=TRUE)
fish = setCol(fish, ls.cluster)
fish = setCol(fish, as.character(ls.cluster))
fish = layoutClones(fish)
fishPlot(fish, shape="spline", title.btm="PatientID", cex.title=0.5,
vlines=seq(1, length(ls.sample)), vlab=ls.sample, pad.left=0.5)
if (length(ls.cluster) > 10) {
fish = setCol(fish, as.character(ls.cluster))
}
fish = layoutClones(fish)
fishPlot(fish, shape="spline", title.btm="PatientID", cex.title=0.5,
vlines=seq(1, length(ls.sample)), vlab=ls.sample, pad.left=0.5)
dir.cluster.tsv = "./data/temp_schism/hu.cluster.tsv"
dir.loci.tsv = "./data/temp_schism/hu.loci.tsv"
dir.output = "./data/temp_schism"
dir.GA.consensusTree = "./data/temp_schism/E1.GA.consensusTree"
dir.cluster.cellularity = "./data/temp_schism/E1.cluster.cellularity"
# read mutations in cluster.tsv from PyClone and get targeted clusters
cluster.tsv = read.table(dir.cluster.tsv, sep="\t", stringsAsFactors=F, header=T)
dir.cluster.tsv = "./data/temp_schism/hu.cluster.tsv"
dir.loci.tsv = "./data/temp_schism/hu.loci.tsv"
dir.output = "./data/temp_schism"
dir.GA.consensusTree = "./data/temp_schism/E1.GA.consensusTree"
dir.cluster.cellularity = "./data/temp_schism/E1.cluster.cellularity"
# get cellularity infomation
cluster.cellularity = read.table(dir.cluster.cellularity, sep="\t", stringsAsFactors=F, header=T)
# read mutations in cluster.tsv from PyClone and get targeted clusters
cluster.tsv = read.table(dir.cluster.tsv, sep="\t", stringsAsFactors=F, header=T)
dir.cluster.tsv = "./data2/temp_schism/hu.cluster.tsv"
dir.loci.tsv = "./data2/temp_schism/hu.loci.tsv"
dir.output = "./data2/temp_schism"
dir.GA.consensusTree = "./data2/temp_schism/E1.GA.consensusTree"
dir.cluster.cellularity = "./data2/temp_schism/E1.cluster.cellularity"
# read mutations in cluster.tsv from PyClone and get targeted clusters
cluster.tsv = read.table(dir.cluster.tsv, sep="\t", stringsAsFactors=F, header=T)
./
# directorys
dir.cluster.tsv = "./data/tempschism/hu.cluster.tsv"
dir.loci.tsv = "./data/tempschism/hu.loci.tsv"
dir.output = "./data/tempschism"
dir.GA.consensusTree = "./data/tempschism/E1.GA.consensusTree"
dir.cluster.cellularity = "./data/tempschism/E1.cluster.cellularity"
source("Schism2Fishplot.R", chdir = T)
dir.cluster.tsv = "./data/tempschism/hu.cluster.tsv"
dir.loci.tsv = "./data/tempschism/hu.loci.tsv"
dir.output = "./data/tempschism"
dir.GA.consensusTree = "./data/tempschism/E1.GA.consensusTree"
dir.cluster.cellularity = "./data/tempschism/E1.cluster.cellularity"
# get cellularity infomation
cluster.cellularity = read.table(dir.cluster.cellularity, sep="\t", stringsAsFactors=F, header=T)
# directorys
getwd()
# directorys
setwd(getwd())
# read mutations in cluster.tsv from PyClone and get targeted clusters
cluster.tsv = read.table(dir.cluster.tsv, sep="\t", stringsAsFactors=F, header=T)
getwd()
# directorys
setwd("/home/ninomoriaty/R_Project/EvolCancer/Meskit")
# read mutations in cluster.tsv from PyClone and get targeted clusters
cluster.tsv = read.table(dir.cluster.tsv, sep="\t", stringsAsFactors=F, header=T)
